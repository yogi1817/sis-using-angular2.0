"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var PropertyMetadata_1 = require("./PropertyMetadata");
var TypeMetadata = (function (_super) {
    __extends(TypeMetadata, _super);
    function TypeMetadata(target, key, typeFunction, isArray) {
        _super.call(this, target, key);
        this._typeFunction = typeFunction;
        this._isArray = isArray;
    }
    Object.defineProperty(TypeMetadata.prototype, "typeFunction", {
        get: function () {
            return this._typeFunction;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TypeMetadata.prototype, "isArray", {
        get: function () {
            return this._isArray;
        },
        enumerable: true,
        configurable: true
    });
    return TypeMetadata;
}(PropertyMetadata_1.PropertyMetadata));
exports.TypeMetadata = TypeMetadata;
//# sourceMappingURL=TypeMetadata.js.map